using DoubleDouble;
using DoubleDoubleStatistic.DirectionalDistributions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using static DoubleDoubleStatistic.DirectionalDistributions.VonMisesDistribution;

namespace DoubleDoubleStatisticTest.DirectionalDistributions {
    [TestClass()]
    public class VonMisesDistributionTests {
        readonly VonMisesDistribution dist_kappa0mu0 = new(kappa: 0, mu: 0);
        readonly VonMisesDistribution dist_kappa1mu1 = new(kappa: 1, mu: 1);
        readonly VonMisesDistribution dist_kappa2mu1 = new(kappa: 2, mu: 1);
        readonly VonMisesDistribution dist_kappa4mu2 = new(kappa: 4, mu: 2);
        readonly VonMisesDistribution dist_kappa4mu3 = new(kappa: 4, mu: 3);
        readonly VonMisesDistribution dist_kappa1mum1 = new(kappa: 1, mu: -1);

        VonMisesDistribution[] Dists => [
            dist_kappa0mu0,
            dist_kappa1mu1,
            dist_kappa2mu1,
            dist_kappa4mu2,
            dist_kappa4mu3,
            dist_kappa1mum1
        ];

        [TestMethod()]
        public void InfoTest() {
            foreach (VonMisesDistribution dist in Dists) {
                Console.WriteLine(dist);
                Console.WriteLine($"Kappa={dist.Kappa}");
                Console.WriteLine($"Mu={dist.Mu}");
                Console.WriteLine($"Mean={dist.Mean}");
                Console.WriteLine($"Mode={dist.Mode}");
                Console.WriteLine($"Variance={dist.Variance}");
                Console.WriteLine($"Skewness={dist.Skewness}");
                //Console.WriteLine($"Kurtosis={dist.Kurtosis}");
                Console.WriteLine($"Entropy={dist.Entropy}");
                Console.WriteLine(dist.Formula);
            }
        }

        [TestMethod()]
        public void MeanTest() {
            Assert.AreEqual(0, (double)dist_kappa0mu0.Mean, 1e-10);
            Assert.AreEqual(1, (double)dist_kappa1mu1.Mean, 1e-10);
            Assert.AreEqual(1, (double)dist_kappa2mu1.Mean, 1e-10);
            Assert.AreEqual(2, (double)dist_kappa4mu2.Mean, 1e-10);
            Assert.AreEqual(3, (double)dist_kappa4mu3.Mean, 1e-10);
            Assert.AreEqual(-1, (double)dist_kappa1mum1.Mean, 1e-10);
        }

        [TestMethod()]
        public void ModeTest() {
            Assert.AreEqual(0, (double)dist_kappa0mu0.Mode, 1e-10);
            Assert.AreEqual(1, (double)dist_kappa1mu1.Mode, 1e-10);
            Assert.AreEqual(1, (double)dist_kappa2mu1.Mode, 1e-10);
            Assert.AreEqual(2, (double)dist_kappa4mu2.Mode, 1e-10);
            Assert.AreEqual(3, (double)dist_kappa4mu3.Mode, 1e-10);
            Assert.AreEqual(-1, (double)dist_kappa1mum1.Mode, 1e-10);
        }

        [TestMethod()]
        public void VarianceTest() {
            Assert.AreEqual(1, (double)dist_kappa0mu0.Variance, 1e-10);
            Assert.AreEqual(0.5536100341034655, (double)dist_kappa1mu1.Variance, 1e-10);
            Assert.AreEqual(0.3022253420359920, (double)dist_kappa2mu1.Variance, 1e-10);
            Assert.AreEqual(0.13647738897544942, (double)dist_kappa4mu2.Variance, 1e-10);
            Assert.AreEqual(0.13647738897544942, (double)dist_kappa4mu3.Variance, 1e-10);
            Assert.AreEqual(0.5536100341034655, (double)dist_kappa1mum1.Variance, 1e-10);
        }

        [TestMethod()]
        public void SkewnessTest() {
            Assert.AreEqual(0, (double)dist_kappa0mu0.Skewness, 1e-10);
            Assert.AreEqual(0, (double)dist_kappa1mu1.Skewness, 1e-10);
            Assert.AreEqual(0, (double)dist_kappa2mu1.Skewness, 1e-10);
            Assert.AreEqual(0, (double)dist_kappa4mu2.Skewness, 1e-10);
            Assert.AreEqual(0, (double)dist_kappa4mu3.Skewness, 1e-10);
            Assert.AreEqual(0, (double)dist_kappa1mum1.Skewness, 1e-10);
        }

        [TestMethod()]
        public void KurtosisTest() {
            Assert.Inconclusive();

            Assert.AreEqual(0, (double)dist_kappa0mu0.Kurtosis, 1e-10);
            Assert.AreEqual(0, (double)dist_kappa1mu1.Kurtosis, 1e-10);
            Assert.AreEqual(0, (double)dist_kappa2mu1.Kurtosis, 1e-10);
            Assert.AreEqual(0, (double)dist_kappa4mu2.Kurtosis, 1e-10);
            Assert.AreEqual(0, (double)dist_kappa4mu3.Kurtosis, 1e-10);
            Assert.AreEqual(0, (double)dist_kappa1mum1.Kurtosis, 1e-10);
        }

        [TestMethod()]
        public void EntropyTest() {
            Assert.AreEqual(1.8378770664093453, (double)dist_kappa0mu0.Entropy, 1e-10);
            Assert.AreEqual(1.6274014590199892, (double)dist_kappa1mu1.Entropy, 1e-10);
            Assert.AreEqual(1.2663212919642852, (double)dist_kappa2mu1.Entropy, 1e-10);
            Assert.AreEqual(0.8087594178266033, (double)dist_kappa4mu2.Entropy, 1e-10);
            Assert.AreEqual(0.8087594178266033, (double)dist_kappa4mu3.Entropy, 1e-10);
            Assert.AreEqual(1.6274014590199892, (double)dist_kappa1mum1.Entropy, 1e-10);
        }

        [TestMethod()]
        public void PDFTest() {
            foreach (VonMisesDistribution dist in Dists) {
                Console.WriteLine(dist);
                for (int x = -5; x <= 5; x++) {
                    ddouble pdf = dist.PDF(x);

                    Console.WriteLine($"pdf({x})={pdf}");
                }
            }
        }

        [TestMethod()]
        public void RandomGenerateAndFitTest() {
            Random random = new(1234);

            foreach (VonMisesDistribution dist in Dists) {
                double[] samples = dist.Sample(random, count: 100000).ToArray();

                if (samples.Any(v => v <= -3.15 || v >= 3.15)) {
                    Assert.Fail();
                }

                VonMisesDistribution? dist_fit = VonMisesDistribution.Fit(samples);

                Assert.IsNotNull(dist_fit);

                Console.WriteLine(dist_fit);

                Assert.AreEqual((double)dist.Kappa, (double)dist_fit.Kappa, 0.05, $"{dist},kappa");

                if (dist.Kappa > 0) {
                    Assert.AreEqual((double)dist.Mu, (double)dist_fit.Mu, 0.05, $"{dist},mu");
                }
            }
        }

        [TestMethod()]
        public void PDFExpectedTest() {
            ddouble[] expected_dist_kappa0mu0 = [
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
                1.591549430918953456e-01,
            ];
            ddouble[] expected_dist_kappa1mu1 = [
                1.262658433361680821e-01,
                9.857822855572855036e-02,
                7.813412694035505590e-02,
                6.378831375519262992e-02,
                5.431999140324794001e-02,
                4.873434658004522496e-02,
                4.637644585320686158e-02,
                4.695542186166019177e-02,
                5.054346161430567363e-02,
                5.757671142809635961e-02,
                6.885149586554142886e-02,
                8.547431458624717149e-02,
                1.086860901303820653e-01,
                1.394572651453705459e-01,
                1.777893054419927565e-01,
                2.218248324407577632e-01,
                2.671649100589337800e-01,
                3.070375948101374819e-01,
                3.338031606222612857e-01,
                3.415224008395341682e-01,
                3.283677405989797182e-01,
                2.974232686538262338e-01,
                2.553496106587600512e-01,
                2.097778956599634370e-01,
                1.669385932202845368e-01,
                1.305251602400248345e-01,
                1.018160806327129408e-01,
                8.046934980452617736e-02,
                6.538678888245534615e-02,
                5.533493785934470027e-02,
                4.927945041030657586e-02,
                4.651776013149062916e-02,
                4.671061110864579979e-02,
                4.988206281116422391e-02,
                5.641980438908636430e-02,
                6.707358037474002443e-02,
                8.291508547317151534e-02,
                1.051846943149662567e-01,
                1.349225696487088844e-01,
                1.723084554727874473e-01,
                2.157814651102962777e-01,
                2.612957017582344665e-01,
                3.023382476531483731e-01,
                3.312509601215087307e-01,
                3.417104886234632044e-01,
                3.312509601215087307e-01,
                3.023382476531483731e-01,
                2.612957017582344665e-01,
                2.157814651102962777e-01,
                1.723084554727874473e-01,
                1.349225696487088844e-01,
                1.051846943149662567e-01,
                8.291508547317151534e-02,
                6.707358037474002443e-02,
                5.641980438908636430e-02,
                4.988206281116422391e-02,
                4.671061110864579979e-02,
                4.651776013149062916e-02,
                4.927945041030657586e-02,
                5.533493785934470027e-02,
                6.538678888245534615e-02,
                8.046934980452617736e-02,
                1.018160806327129408e-01,
                1.305251602400248345e-01,
                1.669385932202845368e-01,
                2.097778956599634370e-01,
                2.553496106587600512e-01,
                2.974232686538262338e-01,
                3.283677405989797182e-01,
                3.415224008395341682e-01,
                3.338031606222612857e-01,
                3.070375948101374819e-01,
                2.671649100589337800e-01,
                2.218248324407577632e-01,
                1.777893054419927565e-01,
                1.394572651453705459e-01,
                1.086860901303820653e-01,
                8.547431458624717149e-02,
                6.885149586554142886e-02,
                5.757671142809635961e-02,
                5.054346161430567363e-02,
            ];
            ddouble[] expected_dist_kappa2mu1 = [
                7.043822376776323613e-02,
                4.293373265664816862e-02,
                2.697231083320164244e-02,
                1.797706843996906695e-02,
                1.303635004687131796e-02,
                1.049317518165740135e-02,
                9.502361614349922464e-03,
                9.741102693732125312e-03,
                1.128668990913818393e-02,
                1.464638143425198852e-02,
                2.094418130362330974e-02,
                3.227809401212820839e-02,
                5.218967109012061928e-02,
                8.592487650802947685e-02,
                1.396522364244965619e-01,
                2.173987049477345279e-01,
                3.153519068221353749e-01,
                4.165045394003816792e-01,
                4.922860364933773769e-01,
                5.153176504633409927e-01,
                4.763844729046881610e-01,
                3.908287581715282344e-01,
                2.880759670037967290e-01,
                1.944267772455916254e-01,
                1.231261010531948807e-01,
                7.527055156698320149e-02,
                4.580041133659979585e-02,
                2.860866635305335873e-02,
                1.888933409860856297e-02,
                1.352805877677735677e-02,
                1.072922467677108610e-02,
                9.560359384988472570e-03,
                9.639793409942663815e-03,
                1.099323313353144961e-02,
                1.406370605215536557e-02,
                1.987648601199146908e-02,
                3.037412206385855726e-02,
                4.888118510642311398e-02,
                8.042773460105438754e-02,
                1.311746177969558835e-01,
                2.057144995155953671e-01,
                3.016484929454952280e-01,
                4.038525333518377947e-01,
                4.847869492413842685e-01,
                5.158854120190137227e-01,
                4.847869492413842685e-01,
                4.038525333518377947e-01,
                3.016484929454952280e-01,
                2.057144995155953671e-01,
                1.311746177969558835e-01,
                8.042773460105438754e-02,
                4.888118510642311398e-02,
                3.037412206385855726e-02,
                1.987648601199146908e-02,
                1.406370605215536557e-02,
                1.099323313353144961e-02,
                9.639793409942663815e-03,
                9.560359384988472570e-03,
                1.072922467677108610e-02,
                1.352805877677735677e-02,
                1.888933409860856297e-02,
                2.860866635305335873e-02,
                4.580041133659979585e-02,
                7.527055156698320149e-02,
                1.231261010531948807e-01,
                1.944267772455916254e-01,
                2.880759670037967290e-01,
                3.908287581715282344e-01,
                4.763844729046881610e-01,
                5.153176504633409927e-01,
                4.922860364933773769e-01,
                4.165045394003816792e-01,
                3.153519068221353749e-01,
                2.173987049477345279e-01,
                1.396522364244965619e-01,
                8.592487650802947685e-02,
                5.218967109012061928e-02,
                3.227809401212820839e-02,
                2.094418130362330974e-02,
                1.464638143425198852e-02,
                1.128668990913818393e-02,
            ];
            ddouble[] expected_dist_kappa4mu2 = [
                4.117108374087876665e-01,
                2.179763761410434264e-01,
                9.733167269183382042e-02,
                3.853874185749887188e-02,
                1.433362547808242175e-02,
                5.325207760087251156e-03,
                2.101723463556290361e-03,
                9.336347428635799212e-04,
                4.909658530895564610e-04,
                3.180922643386205079e-04,
                2.608569235166425106e-04,
                2.741293299570273759e-04,
                3.680208699938800412e-04,
                6.197263202394482631e-04,
                1.267260908468692722e-03,
                3.009920502397688252e-03,
                7.868797708473122474e-03,
                2.132932413661959084e-02,
                5.634236215749594684e-02,
                1.365378834036343192e-01,
                2.872963997068953002e-01,
                5.011626984713545285e-01,
                7.001229202393697282e-01,
                7.671659112887648790e-01,
                6.556234163451238883e-01,
                4.412780103164222756e-01,
                2.397470751778439935e-01,
                1.092072361280969350e-01,
                4.379651109788139374e-02,
                1.636776789358437845e-02,
                6.060075261140464992e-03,
                2.364473693429559181e-03,
                1.030795602417442251e-03,
                5.287011120898030617e-04,
                3.325645401174638117e-04,
                2.640509274942435115e-04,
                2.684569885878331018e-04,
                3.491323866010470102e-04,
                5.713981395560913806e-04,
                1.141349034256090422e-03,
                2.665303862635649054e-03,
                6.902759053181771118e-03,
                1.868748827504082555e-02,
                4.970944059324469699e-02,
                1.222556862456215393e-01,
                2.628703362523795439e-01,
                4.711778693307350219e-01,
                6.789551714155750428e-01,
                7.688573234046534033e-01,
                6.789551714155750428e-01,
                4.711778693307350219e-01,
                2.628703362523795439e-01,
                1.222556862456215393e-01,
                4.970944059324469699e-02,
                1.868748827504082555e-02,
                6.902759053181771118e-03,
                2.665303862635649054e-03,
                1.141349034256090422e-03,
                5.713981395560913806e-04,
                3.491323866010470102e-04,
                2.684569885878331018e-04,
                2.640509274942435115e-04,
                3.325645401174638117e-04,
                5.287011120898030617e-04,
                1.030795602417442251e-03,
                2.364473693429559181e-03,
                6.060075261140464992e-03,
                1.636776789358437845e-02,
                4.379651109788139374e-02,
                1.092072361280969350e-01,
                2.397470751778439935e-01,
                4.412780103164222756e-01,
                6.556234163451238883e-01,
                7.671659112887648790e-01,
                7.001229202393697282e-01,
                5.011626984713545285e-01,
                2.872963997068953002e-01,
                1.365378834036343192e-01,
                5.634236215749594684e-02,
                2.132932413661959084e-02,
                7.868797708473122474e-03,
            ];
            ddouble[] expected_dist_kappa4mu3 = [
                5.309631082597947582e-01,
                7.188517916489470805e-01,
                7.621158161013081855e-01,
                6.304216021509746470e-01,
                4.117108374087876665e-01,
                2.179763761410434264e-01,
                9.733167269183382042e-02,
                3.853874185749887188e-02,
                1.433362547808242175e-02,
                5.325207760087251156e-03,
                2.101723463556290361e-03,
                9.336347428635799212e-04,
                4.909658530895564610e-04,
                3.180922643386205079e-04,
                2.608569235166425106e-04,
                2.741293299570273759e-04,
                3.680208699938800412e-04,
                6.197263202394482631e-04,
                1.267260908468692722e-03,
                3.009920502397688252e-03,
                7.868797708473122474e-03,
                2.132932413661959084e-02,
                5.634236215749594684e-02,
                1.365378834036343192e-01,
                2.872963997068953002e-01,
                5.011626984713545285e-01,
                7.001229202393697282e-01,
                7.671659112887648790e-01,
                6.556234163451238883e-01,
                4.412780103164222756e-01,
                2.397470751778439935e-01,
                1.092072361280969350e-01,
                4.379651109788139374e-02,
                1.636776789358437845e-02,
                6.060075261140464992e-03,
                2.364473693429559181e-03,
                1.030795602417442251e-03,
                5.287011120898030617e-04,
                3.325645401174638117e-04,
                2.640509274942435115e-04,
                2.684569885878331018e-04,
                3.491323866010470102e-04,
                5.713981395560913806e-04,
                1.141349034256090422e-03,
                2.665303862635649054e-03,
                6.902759053181771118e-03,
                1.868748827504082555e-02,
                4.970944059324469699e-02,
                1.222556862456215393e-01,
                2.628703362523795439e-01,
                4.711778693307350219e-01,
                6.789551714155750428e-01,
                7.688573234046534033e-01,
                6.789551714155750428e-01,
                4.711778693307350219e-01,
                2.628703362523795439e-01,
                1.222556862456215393e-01,
                4.970944059324469699e-02,
                1.868748827504082555e-02,
                6.902759053181771118e-03,
                2.665303862635649054e-03,
                1.141349034256090422e-03,
                5.713981395560913806e-04,
                3.491323866010470102e-04,
                2.684569885878331018e-04,
                2.640509274942435115e-04,
                3.325645401174638117e-04,
                5.287011120898030617e-04,
                1.030795602417442251e-03,
                2.364473693429559181e-03,
                6.060075261140464992e-03,
                1.636776789358437845e-02,
                4.379651109788139374e-02,
                1.092072361280969350e-01,
                2.397470751778439935e-01,
                4.412780103164222756e-01,
                6.556234163451238883e-01,
                7.671659112887648790e-01,
                7.001229202393697282e-01,
                5.011626984713545285e-01,
                2.872963997068953002e-01,
            ];
            ddouble[] expected_dist_kappa1mum1 = [
                5.054346161430567363e-02,
                5.757671142809635961e-02,
                6.885149586554142886e-02,
                8.547431458624717149e-02,
                1.086860901303820653e-01,
                1.394572651453705459e-01,
                1.777893054419927565e-01,
                2.218248324407577632e-01,
                2.671649100589337800e-01,
                3.070375948101374819e-01,
                3.338031606222612857e-01,
                3.415224008395341682e-01,
                3.283677405989797182e-01,
                2.974232686538262338e-01,
                2.553496106587600512e-01,
                2.097778956599634370e-01,
                1.669385932202845368e-01,
                1.305251602400248345e-01,
                1.018160806327129408e-01,
                8.046934980452617736e-02,
                6.538678888245534615e-02,
                5.533493785934470027e-02,
                4.927945041030657586e-02,
                4.651776013149062916e-02,
                4.671061110864579979e-02,
                4.988206281116422391e-02,
                5.641980438908636430e-02,
                6.707358037474002443e-02,
                8.291508547317151534e-02,
                1.051846943149662567e-01,
                1.349225696487088844e-01,
                1.723084554727874473e-01,
                2.157814651102962777e-01,
                2.612957017582344665e-01,
                3.023382476531483731e-01,
                3.312509601215087307e-01,
                3.417104886234632044e-01,
                3.312509601215087307e-01,
                3.023382476531483731e-01,
                2.612957017582344665e-01,
                2.157814651102962777e-01,
                1.723084554727874473e-01,
                1.349225696487088844e-01,
                1.051846943149662567e-01,
                8.291508547317151534e-02,
                6.707358037474002443e-02,
                5.641980438908636430e-02,
                4.988206281116422391e-02,
                4.671061110864579979e-02,
                4.651776013149062916e-02,
                4.927945041030657586e-02,
                5.533493785934470027e-02,
                6.538678888245534615e-02,
                8.046934980452617736e-02,
                1.018160806327129408e-01,
                1.305251602400248345e-01,
                1.669385932202845368e-01,
                2.097778956599634370e-01,
                2.553496106587600512e-01,
                2.974232686538262338e-01,
                3.283677405989797182e-01,
                3.415224008395341682e-01,
                3.338031606222612857e-01,
                3.070375948101374819e-01,
                2.671649100589337800e-01,
                2.218248324407577632e-01,
                1.777893054419927565e-01,
                1.394572651453705459e-01,
                1.086860901303820653e-01,
                8.547431458624717149e-02,
                6.885149586554142886e-02,
                5.757671142809635961e-02,
                5.054346161430567363e-02,
                4.695542186166019177e-02,
                4.637644585320686158e-02,
                4.873434658004522496e-02,
                5.431999140324794001e-02,
                6.378831375519262992e-02,
                7.813412694035505590e-02,
                9.857822855572855036e-02,
                1.262658433361680821e-01,
            ];

            foreach ((VonMisesDistribution dist, ddouble[] expecteds) in new[]{
                (dist_kappa0mu0,  expected_dist_kappa0mu0),
                (dist_kappa1mu1,  expected_dist_kappa1mu1),
                (dist_kappa2mu1,  expected_dist_kappa2mu1),
                (dist_kappa4mu2,  expected_dist_kappa4mu2),
                (dist_kappa4mu3,  expected_dist_kappa4mu3),
                (dist_kappa1mum1, expected_dist_kappa1mum1),
            }) {
                for ((double x, int i) = (-10, 0); i < expecteds.Length; x += 0.25, i++) {
                    ddouble expected = expecteds[i];
                    ddouble actual = dist.PDF(x);

                    Console.WriteLine($"{dist} pdf({x})");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    if (expected > 0) {
                        Assert.IsTrue(ddouble.Abs(expected - actual) / expected < 1e-10, $"{dist} pdf({x})\n{expected}\n{actual}");
                    }
                    else {
                        Assert.AreEqual(0, actual);
                    }
                }
            }
        }

        [TestMethod()]
        public void InverseKappaB0Test() {
            for (double x = 0; x <= 1; x += 1d / 4096) {
                double y = InverseKappaB0.Value(x);
                ddouble z = ddouble.BesselI(1, y) / ddouble.BesselI(0, y);

                ddouble err = ddouble.Abs(x - z);

                Console.WriteLine($"{x},{y},{z},{err:e2}");

                if (x < 0.999) {
                    Assert.AreEqual(x, (double)z, 4e-16);
                }
            }
        }
    }
}